FROM python:3.10-slim

WORKDIR /app

# Install only minimal dependencies
RUN pip install --no-cache-dir fastapi==0.104.1 uvicorn==0.24.0 pydantic==2.4.2

# Create a simple mock LLM service
COPY <<EOF /app/app.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import random

app = FastAPI()

class CompletionRequest(BaseModel):
    prompt: str
    max_tokens: int = 100
    temperature: float = 0.7

class CompletionResponse(BaseModel):
    text: str

# Pre-defined responses for health-related queries
RESPONSES = [
    "I recommend you rest and drink plenty of fluids. If symptoms persist for more than 3 days, please consult your doctor.",
    "This might be due to stress or dehydration. Try to relax, drink water, and get some rest.",
    "Based on your symptoms, you should consider scheduling an appointment with your primary care physician.",
    "Your symptoms could be related to seasonal allergies. Over-the-counter antihistamines might help.",
    "Make sure you're getting enough sleep and staying hydrated. These symptoms often improve with proper rest.",
    "I'd suggest taking some over-the-counter pain relief medication and resting. If it gets worse, see a doctor.",
    "This sounds like it might need medical attention. Please consult with a healthcare professional soon.",
    "Try applying a cold compress to the affected area and rest. If pain increases, seek medical advice.",
    "Remember to take your prescribed medication regularly and monitor your symptoms.",
    "Consider lifestyle changes like improved diet and regular exercise, which often help with these symptoms."
]

@app.post("/v1/completions", response_model=CompletionResponse)
async def generate_completion(request: CompletionRequest):
    # Simple logic to select a response based on the prompt
    if "headache" in request.prompt.lower():
        response = "For headaches, I recommend rest, hydration, and over-the-counter pain relievers if needed. If it persists or is severe, please consult a doctor."
    elif "fever" in request.prompt.lower():
        response = "With a fever, it's important to stay hydrated and rest. Take appropriate fever reducers and monitor your temperature. If it's high or persistent, seek medical attention."
    elif "prescription" in request.prompt.lower():
        response = "I see you're asking about prescriptions. Please contact your pharmacy or doctor directly for prescription-related questions to ensure accurate information."
    else:
        # Select a random response for other queries
        response = random.choice(RESPONSES)
    
    return CompletionResponse(text=response)

@app.get("/health")
async def health_check():
    return {"status": "ok"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8008)
EOF

# Expose the port
EXPOSE 8008

# Run the application
CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8008"]