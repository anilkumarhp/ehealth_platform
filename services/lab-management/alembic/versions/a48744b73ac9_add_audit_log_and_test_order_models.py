"""Add audit log and test order models

Revision ID: a48744b73ac9
Revises: 
Create Date: 2025-07-05 09:05:17.051059

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a48744b73ac9'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('action', sa.Enum('CREATE', 'UPDATE', 'DELETE', name='auditactionenum'), nullable=False),
    sa.Column('table_name', sa.String(), nullable=False),
    sa.Column('record_id', sa.UUID(), nullable=False),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_record_id'), 'audit_logs', ['record_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_table_name'), 'audit_logs', ['table_name'], unique=False)
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_table('lab_services',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('lab_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_user_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lab_services_lab_id'), 'lab_services', ['lab_id'], unique=False)
    op.create_table('test_definitions',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('reference_range', sa.String(), nullable=True),
    sa.Column('service_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['service_id'], ['lab_services.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_test_definitions_service_id'), 'test_definitions', ['service_id'], unique=False)
    op.create_table('test_orders',
    sa.Column('patient_user_id', sa.UUID(), nullable=False),
    sa.Column('requesting_entity_id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('lab_service_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING_CONSENT', 'AWAITING_APPOINTMENT', 'SCHEDULED', 'COMPLETED', 'CANCELLED', name='testorderstatusenum'), nullable=False),
    sa.Column('clinical_notes', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['lab_service_id'], ['lab_services.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_test_orders_lab_service_id'), 'test_orders', ['lab_service_id'], unique=False)
    op.create_index(op.f('ix_test_orders_organization_id'), 'test_orders', ['organization_id'], unique=False)
    op.create_index(op.f('ix_test_orders_patient_user_id'), 'test_orders', ['patient_user_id'], unique=False)
    op.create_index(op.f('ix_test_orders_requesting_entity_id'), 'test_orders', ['requesting_entity_id'], unique=False)
    op.create_table('appointments',
    sa.Column('patient_user_id', sa.UUID(), nullable=False),
    sa.Column('lab_id', sa.UUID(), nullable=False),
    sa.Column('lab_service_id', sa.UUID(), nullable=False),
    sa.Column('test_order_id', sa.UUID(), nullable=True),
    sa.Column('appointment_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('PENDING_PAYMENT', 'CONFIRMED', 'COMPLETED', 'CANCELLED', name='appointmentstatusenum'), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['lab_service_id'], ['lab_services.id'], ),
    sa.ForeignKeyConstraint(['test_order_id'], ['test_orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_appointments_lab_id'), 'appointments', ['lab_id'], unique=False)
    op.create_index(op.f('ix_appointments_lab_service_id'), 'appointments', ['lab_service_id'], unique=False)
    op.create_index(op.f('ix_appointments_patient_user_id'), 'appointments', ['patient_user_id'], unique=False)
    op.create_index(op.f('ix_appointments_test_order_id'), 'appointments', ['test_order_id'], unique=False)
    op.create_table('payments',
    sa.Column('appointment_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'SUCCESSFUL', 'FAILED', 'REFUNDED', name='paymentstatusenum'), nullable=False),
    sa.Column('gateway_provider', sa.String(), nullable=True),
    sa.Column('gateway_transaction_id', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointments.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('gateway_transaction_id')
    )
    op.create_index(op.f('ix_payments_appointment_id'), 'payments', ['appointment_id'], unique=True)
    op.create_index(op.f('ix_payments_user_id'), 'payments', ['user_id'], unique=False)
    op.create_table('reports',
    sa.Column('patient_user_id', sa.UUID(), nullable=False),
    sa.Column('uploading_lab_id', sa.UUID(), nullable=False),
    sa.Column('appointment_id', sa.UUID(), nullable=True),
    sa.Column('report_type', sa.String(), nullable=False),
    sa.Column('test_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('storage_bucket', sa.String(), nullable=False),
    sa.Column('storage_key', sa.String(), nullable=False),
    sa.Column('file_hash', sa.String(), nullable=True),
    sa.Column('additional_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointments.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('storage_key')
    )
    op.create_index(op.f('ix_reports_appointment_id'), 'reports', ['appointment_id'], unique=False)
    op.create_index(op.f('ix_reports_patient_user_id'), 'reports', ['patient_user_id'], unique=False)
    op.create_index(op.f('ix_reports_uploading_lab_id'), 'reports', ['uploading_lab_id'], unique=False)
    op.create_table('access_permissions',
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('grantee_id', sa.UUID(), nullable=False),
    sa.Column('granted_by_user_id', sa.UUID(), nullable=False),
    sa.Column('permission_level', sa.Enum('VIEW', 'VIEW_AND_DOWNLOAD', name='permissionlevelenum'), nullable=False),
    sa.Column('expiry_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_access_permissions_granted_by_user_id'), 'access_permissions', ['granted_by_user_id'], unique=False)
    op.create_index(op.f('ix_access_permissions_grantee_id'), 'access_permissions', ['grantee_id'], unique=False)
    op.create_index(op.f('ix_access_permissions_report_id'), 'access_permissions', ['report_id'], unique=False)
    op.create_table('access_requests',
    sa.Column('report_id', sa.UUID(), nullable=False),
    sa.Column('requesting_entity_id', sa.UUID(), nullable=False),
    sa.Column('patient_user_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'DENIED', 'EXPIRED', name='accessrequeststatusenum'), nullable=False),
    sa.Column('request_reason', sa.Text(), nullable=True),
    sa.Column('resolution_notes', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_access_requests_patient_user_id'), 'access_requests', ['patient_user_id'], unique=False)
    op.create_index(op.f('ix_access_requests_report_id'), 'access_requests', ['report_id'], unique=False)
    op.create_index(op.f('ix_access_requests_requesting_entity_id'), 'access_requests', ['requesting_entity_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_access_requests_requesting_entity_id'), table_name='access_requests')
    op.drop_index(op.f('ix_access_requests_report_id'), table_name='access_requests')
    op.drop_index(op.f('ix_access_requests_patient_user_id'), table_name='access_requests')
    op.drop_table('access_requests')
    op.drop_index(op.f('ix_access_permissions_report_id'), table_name='access_permissions')
    op.drop_index(op.f('ix_access_permissions_grantee_id'), table_name='access_permissions')
    op.drop_index(op.f('ix_access_permissions_granted_by_user_id'), table_name='access_permissions')
    op.drop_table('access_permissions')
    op.drop_index(op.f('ix_reports_uploading_lab_id'), table_name='reports')
    op.drop_index(op.f('ix_reports_patient_user_id'), table_name='reports')
    op.drop_index(op.f('ix_reports_appointment_id'), table_name='reports')
    op.drop_table('reports')
    op.drop_index(op.f('ix_payments_user_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_appointment_id'), table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_appointments_test_order_id'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_patient_user_id'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_lab_service_id'), table_name='appointments')
    op.drop_index(op.f('ix_appointments_lab_id'), table_name='appointments')
    op.drop_table('appointments')
    op.drop_index(op.f('ix_test_orders_requesting_entity_id'), table_name='test_orders')
    op.drop_index(op.f('ix_test_orders_patient_user_id'), table_name='test_orders')
    op.drop_index(op.f('ix_test_orders_organization_id'), table_name='test_orders')
    op.drop_index(op.f('ix_test_orders_lab_service_id'), table_name='test_orders')
    op.drop_table('test_orders')
    op.drop_index(op.f('ix_test_definitions_service_id'), table_name='test_definitions')
    op.drop_table('test_definitions')
    op.drop_index(op.f('ix_lab_services_lab_id'), table_name='lab_services')
    op.drop_table('lab_services')
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_table_name'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_record_id'), table_name='audit_logs')
    op.drop_table('audit_logs')
    # ### end Alembic commands ###
